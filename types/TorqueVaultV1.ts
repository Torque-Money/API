/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TorqueVaultV1Interface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "EMERGENCY_ADMIN_ROLE()": FunctionFragment;
        "FEE_ADMIN_ROLE()": FunctionFragment;
        "VAULT_ADMIN_ROLE()": FunctionFragment;
        "VAULT_CONTROLLER_ROLE()": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "approxAvailable(address)": FunctionFragment;
        "approxBalance(address)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "deposit(uint256[])": FunctionFragment;
        "depositAllIntoStrategy()": FunctionFragment;
        "depositIntoStrategy(uint256[])": FunctionFragment;
        "estimateDeposit(uint256[])": FunctionFragment;
        "estimateRedeem(uint256)": FunctionFragment;
        "feeAmount()": FunctionFragment;
        "feePercent()": FunctionFragment;
        "feeRecipient()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getStrategy()": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "inCaseTokensGetStuck(address,uint256)": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "initialize(address[],address,address,uint256,uint256)": FunctionFragment;
        "isSupportedToken(address)": FunctionFragment;
        "name()": FunctionFragment;
        "redeem(uint256)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setFeeAmount(uint256)": FunctionFragment;
        "setFeePercent(uint256,uint256)": FunctionFragment;
        "setFeeRecipient(address)": FunctionFragment;
        "setStrategy(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "tokenByIndex(uint256)": FunctionFragment;
        "tokenCount()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "withdrawAllFromStrategy()": FunctionFragment;
        "withdrawFromStrategy(uint256[])": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "DEFAULT_ADMIN_ROLE"
            | "EMERGENCY_ADMIN_ROLE"
            | "FEE_ADMIN_ROLE"
            | "VAULT_ADMIN_ROLE"
            | "VAULT_CONTROLLER_ROLE"
            | "allowance"
            | "approve"
            | "approxAvailable"
            | "approxBalance"
            | "balanceOf"
            | "decimals"
            | "decreaseAllowance"
            | "deposit"
            | "depositAllIntoStrategy"
            | "depositIntoStrategy"
            | "estimateDeposit"
            | "estimateRedeem"
            | "feeAmount"
            | "feePercent"
            | "feeRecipient"
            | "getRoleAdmin"
            | "getStrategy"
            | "grantRole"
            | "hasRole"
            | "inCaseTokensGetStuck"
            | "increaseAllowance"
            | "initialize"
            | "isSupportedToken"
            | "name"
            | "redeem"
            | "renounceRole"
            | "revokeRole"
            | "setFeeAmount"
            | "setFeePercent"
            | "setFeeRecipient"
            | "setStrategy"
            | "supportsInterface"
            | "symbol"
            | "tokenByIndex"
            | "tokenCount"
            | "totalSupply"
            | "transfer"
            | "transferFrom"
            | "withdrawAllFromStrategy"
            | "withdrawFromStrategy"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "EMERGENCY_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "FEE_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "VAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "VAULT_CONTROLLER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "approxAvailable", values: [string]): string;
    encodeFunctionData(functionFragment: "approxBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deposit", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "depositAllIntoStrategy", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositIntoStrategy", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "estimateDeposit", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "estimateRedeem", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "feePercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "feeRecipient", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getStrategy", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "inCaseTokensGetStuck", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string[], string, string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedToken", values: [string]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "redeem", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setFeeAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFeePercent", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFeeRecipient", values: [string]): string;
    encodeFunctionData(functionFragment: "setStrategy", values: [string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawAllFromStrategy", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFromStrategy", values: [BigNumberish[]]): string;

    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "EMERGENCY_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "FEE_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VAULT_CONTROLLER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approxAvailable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approxBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositAllIntoStrategy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositIntoStrategy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateRedeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStrategy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inCaseTokensGetStuck", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setStrategy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAllFromStrategy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFromStrategy", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Deposit(address,uint256[],uint256)": EventFragment;
        "Redeem(address,uint256,uint256[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
    owner: string;
    spender: string;
    value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
    caller: string;
    amount: BigNumber[];
    shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber[], BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RedeemEventObject {
    caller: string;
    shares: BigNumber;
    amount: BigNumber[];
}
export type RedeemEvent = TypedEvent<[string, BigNumber, BigNumber[]], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
    from: string;
    to: string;
    value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TorqueVaultV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: TorqueVaultV1Interface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        FEE_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        VAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        VAULT_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        depositAllIntoStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        depositIntoStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        estimateDeposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>;

        estimateRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]] & { amount: BigNumber[] }>;

        feeAmount(overrides?: CallOverrides): Promise<[BigNumber] & { _amount: BigNumber }>;

        feePercent(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _percent: BigNumber; _denominator: BigNumber }>;

        feeRecipient(overrides?: CallOverrides): Promise<[string] & { _recipient: string }>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        getStrategy(overrides?: CallOverrides): Promise<[string] & { _strategy: string }>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        initialize(
            token: string[],
            _strategy: string,
            _feeRecipient: string,
            _feePercent: BigNumberish,
            _feePercentDenominator: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<[boolean] & { supportedToken: boolean }>;

        name(overrides?: CallOverrides): Promise<[string]>;

        redeem(shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setFeeAmount(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setFeePercent(_percent: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setFeeRecipient(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        setStrategy(_strategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[string] & { token: string }>;

        tokenCount(overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        withdrawAllFromStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        withdrawFromStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    VAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    VAULT_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositAllIntoStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositIntoStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    estimateDeposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    estimateRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _percent: BigNumber; _denominator: BigNumber }>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStrategy(overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    initialize(
        token: string[],
        _strategy: string,
        _feeRecipient: string,
        _feePercent: BigNumberish,
        _feePercentDenominator: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    redeem(shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setFeeAmount(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setFeePercent(_percent: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setFeeRecipient(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setStrategy(_strategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawAllFromStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawFromStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        FEE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        VAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        VAULT_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<number>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        deposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

        depositAllIntoStrategy(overrides?: CallOverrides): Promise<void>;

        depositIntoStrategy(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        estimateDeposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

        estimateRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

        feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        feePercent(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _percent: BigNumber; _denominator: BigNumber }>;

        feeRecipient(overrides?: CallOverrides): Promise<string>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        getStrategy(overrides?: CallOverrides): Promise<string>;

        grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        initialize(
            token: string[],
            _strategy: string,
            _feeRecipient: string,
            _feePercent: BigNumberish,
            _feePercentDenominator: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

        name(overrides?: CallOverrides): Promise<string>;

        redeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

        renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        setFeeAmount(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setFeePercent(_percent: BigNumberish, _denominator: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setFeeRecipient(_recipient: string, overrides?: CallOverrides): Promise<void>;

        setStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        withdrawAllFromStrategy(overrides?: CallOverrides): Promise<void>;

        withdrawFromStrategy(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "Approval(address,address,uint256)"(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;
        Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

        "Deposit(address,uint256[],uint256)"(caller?: string | null, amount?: null, shares?: null): DepositEventFilter;
        Deposit(caller?: string | null, amount?: null, shares?: null): DepositEventFilter;

        "Redeem(address,uint256,uint256[])"(caller?: string | null, shares?: null, amount?: null): RedeemEventFilter;
        Redeem(caller?: string | null, shares?: null, amount?: null): RedeemEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(role?: BytesLike | null, previousAdminRole?: BytesLike | null, newAdminRole?: BytesLike | null): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;
        RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
        RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

        "Transfer(address,address,uint256)"(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
        Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        FEE_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        VAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        VAULT_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        depositAllIntoStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        depositIntoStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        estimateDeposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

        estimateRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        feePercent(overrides?: CallOverrides): Promise<BigNumber>;

        feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        getStrategy(overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        initialize(
            token: string[],
            _strategy: string,
            _feeRecipient: string,
            _feePercent: BigNumberish,
            _feePercentDenominator: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        redeem(shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setFeeAmount(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setFeePercent(_percent: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setFeeRecipient(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        setStrategy(_strategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        withdrawAllFromStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        withdrawFromStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        FEE_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VAULT_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        depositAllIntoStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        depositIntoStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        estimateDeposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

        estimateRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        feeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        initialize(
            token: string[],
            _strategy: string,
            _feeRecipient: string,
            _feePercent: BigNumberish,
            _feePercentDenominator: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        redeem(shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        setFeeAmount(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        setFeePercent(_percent: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        setFeeRecipient(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        setStrategy(_strategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        withdrawAllFromStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        withdrawFromStrategy(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
    };
}
