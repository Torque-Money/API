/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStrategyInterface extends utils.Interface {
    functions: {
        "approxAvailable(address)": FunctionFragment;
        "approxBalance(address)": FunctionFragment;
        "deposit(uint256[])": FunctionFragment;
        "depositAll()": FunctionFragment;
        "isSupportedToken(address)": FunctionFragment;
        "tokenByIndex(uint256)": FunctionFragment;
        "tokenCount()": FunctionFragment;
        "withdraw(uint256[])": FunctionFragment;
        "withdrawAll()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "approxAvailable"
            | "approxBalance"
            | "deposit"
            | "depositAll"
            | "isSupportedToken"
            | "tokenByIndex"
            | "tokenCount"
            | "withdraw"
            | "withdrawAll"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "approxAvailable", values: [string]): string;
    encodeFunctionData(functionFragment: "approxBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "deposit", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "depositAll", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedToken", values: [string]): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdrawAll", values?: undefined): string;

    decodeFunctionResult(functionFragment: "approxAvailable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approxBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAll", data: BytesLike): Result;

    events: {};
}

export interface IStrategy extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IStrategyInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        approxAvailable(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<[boolean] & { supportedToken: boolean }>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[string] & { token: string }>;

        tokenCount(overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
    };

    approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    callStatic: {
        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        deposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        depositAll(overrides?: CallOverrides): Promise<void>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        withdraw(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        withdrawAll(overrides?: CallOverrides): Promise<void>;
    };

    filters: {};

    estimateGas: {
        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        approxAvailable(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
    };
}
