/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ISupportsTokenInterface extends utils.Interface {
  functions: {
    "approxAvailable(address)": FunctionFragment;
    "approxBalance(address)": FunctionFragment;
    "isSupportedToken(address)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approxAvailable"
      | "approxBalance"
      | "isSupportedToken"
      | "tokenByIndex"
      | "tokenCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approxAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approxBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approxAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approxBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;

  events: {};
}

export interface ISupportsToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISupportsTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approxAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    approxBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    isSupportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { supportedToken: boolean }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    tokenCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approxAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSupportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approxAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSupportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approxAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approxBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
