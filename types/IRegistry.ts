/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IRegistryInterface extends utils.Interface {
  functions: {
    "add(address)": FunctionFragment;
    "entryByIndex(uint256)": FunctionFragment;
    "entryCount()": FunctionFragment;
    "isEntry(address)": FunctionFragment;
    "remove(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "entryByIndex"
      | "entryCount"
      | "isEntry"
      | "remove"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "add", values: [string]): string;
  encodeFunctionData(
    functionFragment: "entryByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEntry", values: [string]): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entryByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;

  events: {};
}

export interface IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    entryByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { entry: string }>;

    entryCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    isEntry(
      entry: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _entry: boolean }>;

    remove(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    entry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  entryByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  entryCount(overrides?: CallOverrides): Promise<BigNumber>;

  isEntry(entry: string, overrides?: CallOverrides): Promise<boolean>;

  remove(
    entry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(entry: string, overrides?: CallOverrides): Promise<void>;

    entryByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    entryCount(overrides?: CallOverrides): Promise<BigNumber>;

    isEntry(entry: string, overrides?: CallOverrides): Promise<boolean>;

    remove(entry: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    add(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    entryByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryCount(overrides?: CallOverrides): Promise<BigNumber>;

    isEntry(entry: string, overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    entryByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEntry(
      entry: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
