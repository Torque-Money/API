/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BeefyLPStrategyInterface extends utils.Interface {
    functions: {
        "APY()": FunctionFragment;
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "EMERGENCY_ADMIN_ROLE()": FunctionFragment;
        "STRATEGY_ADMIN_ROLE()": FunctionFragment;
        "STRATEGY_CONTROLLER_ROLE()": FunctionFragment;
        "approxAvailable(address)": FunctionFragment;
        "approxBalance(address)": FunctionFragment;
        "beVault()": FunctionFragment;
        "deposit(uint256[])": FunctionFragment;
        "depositAll()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "inCaseTokensGetStuck(address,uint256)": FunctionFragment;
        "initialize(address[],uint256,address,address,address)": FunctionFragment;
        "isSupportedToken(address)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "tokenByIndex(uint256)": FunctionFragment;
        "tokenCount()": FunctionFragment;
        "uniFactory()": FunctionFragment;
        "uniRouter()": FunctionFragment;
        "updateAPY(uint256)": FunctionFragment;
        "withdraw(uint256[])": FunctionFragment;
        "withdrawAll()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "APY"
            | "DEFAULT_ADMIN_ROLE"
            | "EMERGENCY_ADMIN_ROLE"
            | "STRATEGY_ADMIN_ROLE"
            | "STRATEGY_CONTROLLER_ROLE"
            | "approxAvailable"
            | "approxBalance"
            | "beVault"
            | "deposit"
            | "depositAll"
            | "getRoleAdmin"
            | "grantRole"
            | "hasRole"
            | "inCaseTokensGetStuck"
            | "initialize"
            | "isSupportedToken"
            | "renounceRole"
            | "revokeRole"
            | "supportsInterface"
            | "tokenByIndex"
            | "tokenCount"
            | "uniFactory"
            | "uniRouter"
            | "updateAPY"
            | "withdraw"
            | "withdrawAll"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "APY", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "EMERGENCY_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "STRATEGY_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "STRATEGY_CONTROLLER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "approxAvailable", values: [string]): string;
    encodeFunctionData(functionFragment: "approxBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "beVault", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "depositAll", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "inCaseTokensGetStuck", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string[], BigNumberish, string, string, string]): string;
    encodeFunctionData(functionFragment: "isSupportedToken", values: [string]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tokenCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "uniFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateAPY", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdrawAll", values?: undefined): string;

    decodeFunctionResult(functionFragment: "APY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "EMERGENCY_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "STRATEGY_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "STRATEGY_CONTROLLER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approxAvailable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approxBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "beVault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inCaseTokensGetStuck", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uniFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateAPY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAll", data: BytesLike): Result;

    events: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface BeefyLPStrategy extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: BeefyLPStrategyInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        APY(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { apy: BigNumber; decimals: BigNumber }>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        STRATEGY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        STRATEGY_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

        beVault(overrides?: CallOverrides): Promise<[string]>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        initialize(
            token: string[],
            initialAPY: BigNumberish,
            _uniRouter: string,
            _uniFactory: string,
            _beVault: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<[boolean] & { supportedToken: boolean }>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[string] & { token: string }>;

        tokenCount(overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

        uniFactory(overrides?: CallOverrides): Promise<[string]>;

        uniRouter(overrides?: CallOverrides): Promise<[string]>;

        updateAPY(apy: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
    };

    APY(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { apy: BigNumber; decimals: BigNumber }>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    STRATEGY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    STRATEGY_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    beVault(overrides?: CallOverrides): Promise<string>;

    deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    initialize(
        token: string[],
        initialAPY: BigNumberish,
        _uniRouter: string,
        _uniFactory: string,
        _beVault: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    uniFactory(overrides?: CallOverrides): Promise<string>;

    uniRouter(overrides?: CallOverrides): Promise<string>;

    updateAPY(apy: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    callStatic: {
        APY(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { apy: BigNumber; decimals: BigNumber }>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        STRATEGY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        STRATEGY_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        beVault(overrides?: CallOverrides): Promise<string>;

        deposit(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        depositAll(overrides?: CallOverrides): Promise<void>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        initialize(token: string[], initialAPY: BigNumberish, _uniRouter: string, _uniFactory: string, _beVault: string, overrides?: CallOverrides): Promise<void>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

        renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        uniFactory(overrides?: CallOverrides): Promise<string>;

        uniRouter(overrides?: CallOverrides): Promise<string>;

        updateAPY(apy: BigNumberish, overrides?: CallOverrides): Promise<void>;

        withdraw(amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        withdrawAll(overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(role?: BytesLike | null, previousAdminRole?: BytesLike | null, newAdminRole?: BytesLike | null): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;
        RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
        RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
    };

    estimateGas: {
        APY(overrides?: CallOverrides): Promise<BigNumber>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        STRATEGY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        STRATEGY_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        beVault(overrides?: CallOverrides): Promise<BigNumber>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        initialize(
            token: string[],
            initialAPY: BigNumberish,
            _uniRouter: string,
            _uniFactory: string,
            _beVault: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

        uniFactory(overrides?: CallOverrides): Promise<BigNumber>;

        uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

        updateAPY(apy: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        APY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STRATEGY_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STRATEGY_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approxAvailable(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approxBalance(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        beVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        deposit(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        depositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        inCaseTokensGetStuck(token: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        initialize(
            token: string[],
            initialAPY: BigNumberish,
            _uniRouter: string,
            _uniFactory: string,
            _beVault: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isSupportedToken(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        revokeRole(role: BytesLike, account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        uniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        updateAPY(apy: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        withdraw(amount: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
    };
}
